Prog "Vocab" ["BinarySort","List","Maybe","Prelude","XML","XML2"] [TypeSyn ("Vocab","Vocab") Public [] (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]),Type ("Vocab","Pos") Public [] [Cons ("Vocab","Adjective") 0 Public [],Cons ("Vocab","Adverb") 0 Public [],Cons ("Vocab","Article") 0 Public [],Cons ("Vocab","Noun") 0 Public [],Cons ("Vocab","Preposition") 0 Public [],Cons ("Vocab","Pronoun") 0 Public [],Cons ("Vocab","Verb") 0 Public []],Type ("Vocab","Word") Public [] [Cons ("Vocab","Word") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Vocab","Pos") []]]]] [Func ("Vocab","posToString") 1 Public (FuncType (TCons ("Vocab","Pos") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Vocab","Adjective") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'j'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Vocab","Adverb") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Vocab","Article") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Vocab","Noun") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Vocab","Preposition") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Vocab","Pronoun") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Vocab","Verb") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])])])),Func ("Vocab","posFromString") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Vocab","Pos") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'j'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Vocab","Adjective") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude","[]") []]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Vocab","Adverb") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Vocab","Article") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Vocab","Noun") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Vocab","Preposition") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Vocab","Pronoun") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Vocab","Verb") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])])])),Func ("Vocab","wordName") 1 Public (FuncType (TCons ("Vocab","Word") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Vocab","Word") [2,3]) (Var 2)])),Func ("Vocab","wordPos") 1 Public (FuncType (TCons ("Vocab","Word") []) (TCons ("Prelude","[]") [TCons ("Vocab","Pos") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Vocab","Word") [2,3]) (Var 3)])),Func ("Vocab","isPos'") 1 Public (FuncType (TCons ("Vocab","Pos") []) (FuncType (TCons ("Vocab","Word") []) (TCons ("Prelude","Bool") []))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","elem") [Var 1],Comb (FuncPartCall 1) ("Vocab","wordPos") []])),Func ("Vocab","addWord") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Vocab","Word") []) (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Vocab","Word") [3,4]) (Let [(5,Comb FuncCall ("BinarySort","split'") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","==") [Var 3],Comb (FuncPartCall 1) ("Vocab","wordName") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude",">") [Var 3],Comb (FuncPartCall 1) ("Vocab","wordName") []],Var 1]),(6,Comb FuncCall ("Vocab","addWord._#selFP2#as") [Var 5]),(7,Comb FuncCall ("Vocab","addWord._#selFP3#mw") [Var 5]),(8,Comb FuncCall ("Vocab","addWord._#selFP4#bs") [Var 5])] (Comb FuncCall ("Prelude","++") [Var 6,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Case  Rigid (Var 7) [Branch (Pattern ("Prelude","Just") [9]) (Case  Rigid (Var 9) [Branch (Pattern ("Vocab","Word") [10,11]) (Comb ConsCall ("Vocab","Word") [Var 3,Comb FuncCall ("List","nub") [Comb FuncCall ("Prelude","++") [Var 4,Var 11]]])]),Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Vocab","Word") [Var 3,Var 4])],Comb ConsCall ("Prelude","[]") []],Var 8]]))])),Func ("Vocab","addWord._#selFP2#as") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Vocab","Word") []],TCons ("Prelude","Maybe") [TCons ("Vocab","Word") []],TCons ("Prelude","[]") [TCons ("Vocab","Word") []]]) (TCons ("Prelude","[]") [TCons ("Vocab","Word") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("Vocab","addWord._#selFP3#mw") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Vocab","Word") []],TCons ("Prelude","Maybe") [TCons ("Vocab","Word") []],TCons ("Prelude","[]") [TCons ("Vocab","Word") []]]) (TCons ("Prelude","Maybe") [TCons ("Vocab","Word") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("Vocab","addWord._#selFP4#bs") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Vocab","Word") []],TCons ("Prelude","Maybe") [TCons ("Vocab","Word") []],TCons ("Prelude","[]") [TCons ("Vocab","Word") []]]) (TCons ("Prelude","[]") [TCons ("Vocab","Word") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("Vocab","addWords") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","$##") [Comb (FuncPartCall 1) ("Vocab","addWords") [Var 4],Comb FuncCall ("Vocab","addWord") [Var 2,Var 3]])])),Func ("Vocab","getWord") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Maybe") [TCons ("Vocab","Word") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("List","find") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","==") [Var 2],Comb (FuncPartCall 1) ("Vocab","wordName") []]],Var 1])),Func ("Vocab","isPos") 3 Public (FuncType (TCons ("Vocab","Pos") []) (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Maybe","fromMaybe") [Comb ConsCall ("Prelude","False") []],Comb FuncCall ("Maybe",">>-") [Comb FuncCall ("Vocab","getWord") [Var 2,Var 3],Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Prelude","Just") [],Comb FuncCall ("Vocab","isPos'") [Var 1]]]])),Func ("Vocab","isAdjective") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Vocab","isPos") [Comb ConsCall ("Vocab","Adjective") []])),Func ("Vocab","isAdverb") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Vocab","isPos") [Comb ConsCall ("Vocab","Adverb") []])),Func ("Vocab","isArticle") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Vocab","isPos") [Comb ConsCall ("Vocab","Article") []])),Func ("Vocab","isPreposition") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Vocab","isPos") [Comb ConsCall ("Vocab","Preposition") []])),Func ("Vocab","isPronoun") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Vocab","isPos") [Comb ConsCall ("Vocab","Pronoun") []])),Func ("Vocab","removeSuffix") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude","reverse") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Vocab","removeSuffix.f.41") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 1]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 2]]])),Func ("Vocab","removeSuffix.f.41") 2 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("List","isPrefixOf") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","drop") [Comb FuncCall ("Prelude","length") [Var 1],Var 2]),Branch (Pattern ("Prelude","False") []) (Var 2)])),Func ("Vocab","isNoun") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Vocab","isPos") [Comb ConsCall ("Vocab","Noun") [],Var 1,Var 2],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Vocab","isPos") [Comb ConsCall ("Vocab","Noun") [],Var 1,Comb FuncCall ("Vocab","removeSuffix") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []],Var 2]],Comb FuncCall ("Vocab","isPos") [Comb ConsCall ("Vocab","Noun") [],Var 1,Comb FuncCall ("Vocab","removeSuffix") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]],Var 2]]]])),Func ("Vocab","isVerb") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Vocab","isPos") [Comb ConsCall ("Vocab","Verb") [],Var 1,Var 2],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Vocab","isPos") [Comb ConsCall ("Vocab","Verb") [],Var 1,Comb FuncCall ("Vocab","removeSuffix") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []],Var 2]],Comb FuncCall ("Vocab","isPos") [Comb ConsCall ("Vocab","Verb") [],Var 1,Comb FuncCall ("Vocab","removeSuffix") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]],Var 2]]]])),Func ("Vocab","loadVocab") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Vocab","Word") []]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("XML","readXmlFile") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Vocab","loadVocab.f.49") []],Comb FuncCall ("XML2","getElemsByTagName") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]])),Func ("Vocab","loadVocab.f.49") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Vocab","Word") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'w')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("Vocab","Word") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Maybe","fromJust") [],Comb FuncCall ("Prelude","lookup") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Var 3]]],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Vocab","posFromString") []],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","words") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Maybe","fromJust") [],Comb FuncCall ("Prelude","lookup") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]],Var 3]]]]])])])])])])])])])])])),Func ("Vocab","vocabToXML") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (TCons ("XML","XmlExp") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Vocab","vocabToXML.f.54") []]])),Func ("Vocab","vocabToXML.f.54") 1 Private (FuncType (TCons ("Vocab","Word") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Vocab","Word") [2,3]) (Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Var 2],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","unwords") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Vocab","posToString") [],Var 3]]],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []])])),Func ("Vocab","writeVocab") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("XML","writeXmlFile") [Var 1],Comb FuncCall ("Vocab","vocabToXML") []]))] []