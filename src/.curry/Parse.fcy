Prog "Parse" ["Maybe","Prelude","Parser"] [TypeSyn ("Parse","Pattern") Public [] (TCons ("Prelude","[]") [TCons ("Parse","PToken") []]),TypeSyn ("Parse","Template") Public [] (TCons ("Prelude","[]") [TCons ("Parse","TToken") []]),TypeSyn ("Parse","Grammar") Public [] (TCons ("Prelude","[]") [TCons ("Parse","Rule") []]),TypeSyn ("Parse","Binding") Public [0] (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]),TypeSyn ("Parse","Bindings") Public [0] (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]]),Type ("Parse","Token") Public [0] [Cons ("Parse","Terminal") 2 Public [TVar 0,TCons ("Prelude","Int") []],Cons ("Parse","Nonterminal") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]]],Type ("Parse","PToken") Public [] [Cons ("Parse","PToken") 3 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]],Type ("Parse","TToken") Public [] [Cons ("Parse","TToken") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]],Cons ("Parse","PTokenRef") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("Parse","Rule") Public [] [Cons ("Parse","Rule") 2 Public [TCons ("Prelude","[]") [TCons ("Parse","PToken") []],TCons ("Prelude","[]") [TCons ("Parse","TToken") []]]]] [Func ("Parse","terminalValue") 1 Public (FuncType (TCons ("Parse","Token") [TVar 0]) (TVar 0)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Parse","Terminal") [2,3]) (Var 2)])),Func ("Parse","terminalPos") 1 Public (FuncType (TCons ("Parse","Token") [TVar 0]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Parse","Terminal") [2,3]) (Var 3)])),Func ("Parse","getBinding") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]]) (TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Maybe","fromMaybe") [Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude","[]") []]],Comb (FuncPartCall 1) ("Prelude","lookup") [Var 1]])),Func ("Parse","getSingleBinding") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]]) (TCons ("Parse","Token") [TVar 0]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Parse","getBinding") [Var 1],Var 2])] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","head") [Var 3])]))),Func ("Parse","ifMaybe") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TVar 0) (TCons ("Prelude","Maybe") [TVar 0]))) (Rule [1,2] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Just") [Var 2]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Func ("Parse","bindPatternToken") 2 Public (FuncType (TCons ("Parse","PToken") []) (FuncType (TCons ("Parse","Token") [TVar 0]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Parse","Terminal") [3,4]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("Parse","Nonterminal") [5,6]) (Case  Flex (Var 1) [Branch (Pattern ("Parse","PToken") [7,8,9]) (Comb FuncCall ("Parse","ifMaybe") [Comb FuncCall ("Prelude","==") [Var 7,Var 5],Comb FuncCall ("Parse","bindPatternToken.f.21") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 8,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","zip") [Var 9,Var 6]]]])])])),Func ("Parse","bindPatternToken.f.21") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TVar 1]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("Parse","bindPatternToken.f.21") [Var 3]),Branch (Pattern ("Prelude","Just") [6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 6,Var 5],Comb FuncCall ("Parse","bindPatternToken.f.21") [Var 3]])])])])),Func ("Parse","bindPattern") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Parse","PToken") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 2]]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("Maybe",">>-") [Comb FuncCall ("Parse","bindPattern") [Var 4,Var 6],Comb (FuncPartCall 1) ("Parse","bindPattern._#lambda1") [Var 5,Var 3]])])])),Func ("Parse","bindPattern._#lambda1") 3 Private (FuncType (TCons ("Parse","Token") [TVar 85]) (FuncType (TCons ("Parse","PToken") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 85]]]],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 85]]]) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 85]]]],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 85]]]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Maybe",">>-") [Comb FuncCall ("Parse","bindPatternToken") [Var 2,Var 1],Comb (FuncPartCall 1) ("Parse","bindPattern._#lambda1._#lambda2") [Var 4,Var 5]])])),Func ("Parse","bindPattern._#lambda1._#lambda2") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 85]]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 85]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 85]]]]) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 85]]]],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 85]]]])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","++") [Var 1,Var 3],Var 2]])),Func ("Parse","instantiateTemplateToken") 2 Public (FuncType (TCons ("Parse","TToken") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]]) (TCons ("Parse","Token") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Parse","PTokenRef") [3]) (Comb FuncCall ("Parse","getSingleBinding") [Var 3,Var 2]),Branch (Pattern ("Parse","TToken") [4,5]) (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("Parse","Nonterminal") [Var 4],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("Parse","instantiateTemplateToken._#lambda3") [Var 2]],Var 5]])])),Func ("Parse","instantiateTemplateToken._#lambda3") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 109]]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 109]]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Parse","getBinding") [Var 2],Var 1])),Func ("Parse","instantiate") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Parse","TToken") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]]) (TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]))) (Rule [1,2] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Parse","instantiate._#lambda4") [Var 2],Var 1])),Func ("Parse","instantiate._#lambda4") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 116]]]]) (FuncType (TCons ("Parse","TToken") []) (TCons ("Parse","Token") [TVar 116]))) (Rule [1,2] (Comb FuncCall ("Parse","instantiateTemplateToken") [Var 2,Var 1])),Func ("Parse","reduceHeadUsingRule") 2 Public (FuncType (TCons ("Parse","Rule") []) (FuncType (TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Parse","Rule") [3,4]) (Comb FuncCall ("Maybe",">>-") [Comb FuncCall ("Parse","bindPattern") [Var 3,Var 2],Comb (FuncPartCall 1) ("Parse","reduceHeadUsingRule._#lambda5") [Var 4]])])),Func ("Parse","reduceHeadUsingRule._#lambda5") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Parse","TToken") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 130]]]],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 130]]]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 130]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("Prelude","Just") [],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Parse","instantiate") [Var 1,Var 3],Var 4]])])),Func ("Parse","reduceHead") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Parse","Rule") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Maybe","mapMaybe") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Parse","reduceHeadUsingRule") [],Var 2]],Var 1])),Func ("Parse","reduce") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Parse","Rule") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Parse","reduceHead") [Var 1,Var 2],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (ConsPartCall 1) ("Prelude",":") [Var 3]],Comb FuncCall ("Parse","reduce") [Var 1,Var 4]]])])),Func ("Parse","parse'") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Parse","Rule") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 4],Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Parse","parse'") [Var 1,Var 2,Var 5]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(6,Comb FuncCall ("Parse","reduce") [Var 1,Var 4])] (Comb FuncCall ("Parse","parse'") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Var 2],Comb FuncCall ("Prelude","++") [Var 5,Var 6]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("Parse","parse") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Parse","Rule") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]))) (Rule [1,2] (Comb FuncCall ("Parse","parse'") [Var 1,Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]))] []