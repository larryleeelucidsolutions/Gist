Prog "Parse" ["Maybe","Prelude","Parser"] [TypeSyn ("Parse","Pattern") Public [] (TCons ("Prelude","[]") [TCons ("Parse","PToken") []]),TypeSyn ("Parse","Template") Public [] (TCons ("Prelude","[]") [TCons ("Parse","TToken") []]),TypeSyn ("Parse","Grammar") Public [] (TCons ("Prelude","[]") [TCons ("Parse","Rule") []]),TypeSyn ("Parse","Binding") Public [0] (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]),TypeSyn ("Parse","Bindings") Public [0] (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]]),Type ("Parse","Token") Public [0] [Cons ("Parse","Terminal") 2 Public [TVar 0,TCons ("Prelude","Int") []],Cons ("Parse","Nonterminal") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]]],Type ("Parse","PToken") Public [] [Cons ("Parse","PToken") 3 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]],Type ("Parse","TToken") Public [] [Cons ("Parse","TToken") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]],Cons ("Parse","PTokenRef") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("Parse","Rule") Public [] [Cons ("Parse","Rule") 2 Public [TCons ("Prelude","[]") [TCons ("Parse","PToken") []],TCons ("Prelude","[]") [TCons ("Parse","TToken") []]]]] [Func ("Parse","terminalValue") 1 Public (FuncType (TCons ("Parse","Token") [TVar 0]) (TVar 0)) (Rule [] (Var 0)),Func ("Parse","terminalPos") 1 Public (FuncType (TCons ("Parse","Token") [TVar 0]) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Parse","getBinding") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]]) (TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]))) (Rule [] (Var 0)),Func ("Parse","getSingleBinding") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]]) (TCons ("Parse","Token") [TVar 0]))) (Rule [] (Var 0)),Func ("Parse","ifMaybe") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TVar 0) (TCons ("Prelude","Maybe") [TVar 0]))) (Rule [] (Var 0)),Func ("Parse","bindPatternToken") 2 Public (FuncType (TCons ("Parse","PToken") []) (FuncType (TCons ("Parse","Token") [TVar 0]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]]]))) (Rule [] (Var 0)),Func ("Parse","bindPattern") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Parse","PToken") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]]))) (Rule [] (Var 0)),Func ("Parse","instantiateTemplateToken") 2 Public (FuncType (TCons ("Parse","TToken") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]]) (TCons ("Parse","Token") [TVar 0]))) (Rule [] (Var 0)),Func ("Parse","instantiate") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Parse","TToken") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]]) (TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]))) (Rule [] (Var 0)),Func ("Parse","reduceHeadUsingRule") 2 Public (FuncType (TCons ("Parse","Rule") []) (FuncType (TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]))) (Rule [] (Var 0)),Func ("Parse","reduceHead") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Parse","Rule") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]))) (Rule [] (Var 0)),Func ("Parse","reduce") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Parse","Rule") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]))) (Rule [] (Var 0)),Func ("Parse","parse'") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Parse","Rule") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]])))) (Rule [] (Var 0)),Func ("Parse","parse") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Parse","Rule") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TVar 0]]]))) (Rule [] (Var 0))] []