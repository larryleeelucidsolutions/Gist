Prog "RDF" ["List","Prelude","XML","XML2"] [TypeSyn ("RDF","URI") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("RDF","RDFVocab") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]),Type ("RDF","RDFNode") Public [] [Cons ("RDF","RDFNode") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("RDF","BlankRDFNode") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("RDF","LiteralRDFNode") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("RDF","RDFPredicate") Public [] [Cons ("RDF","RDFPredicate") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]],Type ("RDF","RDFTriple") Public [] [Cons ("RDF","RDFTriple") 3 Public [TCons ("RDF","RDFNode") [],TCons ("RDF","RDFPredicate") [],TCons ("RDF","RDFNode") []]],Type ("RDF","RDFPrefix") Public [] [Cons ("RDF","RDFPrefix") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("RDF","RDFGraph") Public [] [Cons ("RDF","RDFGraph") 2 Public [TCons ("Prelude","[]") [TCons ("RDF","RDFPrefix") []],TCons ("Prelude","[]") [TCons ("RDF","RDFTriple") []]]]] [Func ("RDF","getRDFPredicateURI") 1 Public (FuncType (TCons ("RDF","RDFPredicate") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RDF","RDFPredicate") [2,3]) (Var 2)])),Func ("RDF","getRDFPredicateType") 1 Public (FuncType (TCons ("RDF","RDFPredicate") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RDF","RDFPredicate") [2,3]) (Var 3)])),Func ("RDF","getRDFTripleSubject") 1 Public (FuncType (TCons ("RDF","RDFTriple") []) (TCons ("RDF","RDFNode") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RDF","RDFTriple") [2,3,4]) (Var 2)])),Func ("RDF","getRDFTriplePredicate") 1 Public (FuncType (TCons ("RDF","RDFTriple") []) (TCons ("RDF","RDFPredicate") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RDF","RDFTriple") [2,3,4]) (Var 3)])),Func ("RDF","getRDFTripleObject") 1 Public (FuncType (TCons ("RDF","RDFTriple") []) (TCons ("RDF","RDFNode") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RDF","RDFTriple") [2,3,4]) (Var 4)])),Func ("RDF","groupRDFTriples") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("RDF","RDFTriple") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("RDF","RDFNode") [],TCons ("Prelude","[]") [TCons ("RDF","RDFTriple") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("RDF","groupRDFTriples.insert.22") [Var 2],Comb FuncCall ("RDF","groupRDFTriples") [Var 3]])])),Func ("RDF","groupRDFTriples.insert.22") 2 Private (FuncType (TCons ("RDF","RDFTriple") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("RDF","RDFNode") [],TCons ("Prelude","[]") [TCons ("RDF","RDFTriple") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("RDF","RDFNode") [],TCons ("Prelude","[]") [TCons ("RDF","RDFTriple") []]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("RDF","getRDFTripleSubject") [Var 1],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Comb FuncCall ("RDF","getRDFTripleSubject") [Var 1]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 5,Comb ConsCall ("Prelude",":") [Var 1,Var 6]],Var 4]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("RDF","groupRDFTriples.insert.22") [Var 1,Var 4]])])])])),Func ("RDF","rdfPrefix") 0 Public (TCons ("RDF","RDFPrefix") []) (Rule [] (Comb ConsCall ("RDF","RDFPrefix") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  '3'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '1'),Comb ConsCall ("Prelude",":") [Lit (Charc  '9'),Comb ConsCall ("Prelude",":") [Lit (Charc  '9'),Comb ConsCall ("Prelude",":") [Lit (Charc  '9'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '0'),Comb ConsCall ("Prelude",":") [Lit (Charc  '2'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '2'),Comb ConsCall ("Prelude",":") [Lit (Charc  '2'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("RDF","getRDFPrefixName") 1 Public (FuncType (TCons ("RDF","RDFPrefix") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RDF","RDFPrefix") [2,3]) (Var 2)])),Func ("RDF","getRDFPrefixURI") 1 Public (FuncType (TCons ("RDF","RDFPrefix") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RDF","RDFPrefix") [2,3]) (Var 3)])),Func ("RDF","getRDFPrefixByURI") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("RDF","RDFPrefix") []]) (TCons ("Prelude","Maybe") [TCons ("RDF","RDFPrefix") []]))) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("List","find") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("List","isPrefixOf") [],Var 1],Comb (FuncPartCall 1) ("RDF","getRDFPrefixURI") []]])),Func ("RDF","getRDFPrefixByName") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("RDF","RDFPrefix") []]) (TCons ("Prelude","Maybe") [TCons ("RDF","RDFPrefix") []]))) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("List","find") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","==") [Var 1],Comb (FuncPartCall 1) ("RDF","getRDFPrefixName") []]])),Func ("RDF","prefixURI") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("RDF","RDFPrefix") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("RDF","getRDFPrefixByURI") [Var 2],Var 1]) [Branch (Pattern ("Prelude","Just") [3]) (Case  Rigid (Var 3) [Branch (Pattern ("RDF","RDFPrefix") [4,5]) (Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","drop") [Comb FuncCall ("Prelude","length") [Var 5],Var 2]]])]),Branch (Pattern ("Prelude","Nothing") []) (Var 2)])),Func ("RDF","getAbsoluteURI") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("RDF","RDFPrefix") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("Prelude","==") [Lit (Charc  ':')]],Var 2]),(4,Comb FuncCall ("RDF","getAbsoluteURI._#selFP2#prefixName") [Var 3]),(5,Comb FuncCall ("RDF","getAbsoluteURI._#selFP3#fragment") [Var 3])] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("RDF","getRDFPrefixByName") [Var 4],Var 1]) [Branch (Pattern ("Prelude","Just") [6]) (Case  Rigid (Var 6) [Branch (Pattern ("RDF","RDFPrefix") [7,8]) (Comb FuncCall ("Prelude","++") [Var 8,Var 5])]),Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Var 2]])]))),Func ("RDF","getAbsoluteURI._#selFP2#prefixName") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 2)])])),Func ("RDF","getAbsoluteURI._#selFP3#fragment") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 5)])])),Func ("RDF","getRDFGraphPrefixes") 1 Public (FuncType (TCons ("RDF","RDFGraph") []) (TCons ("Prelude","[]") [TCons ("RDF","RDFPrefix") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RDF","RDFGraph") [2,3]) (Var 2)])),Func ("RDF","getRDFGraphTriples") 1 Public (FuncType (TCons ("RDF","RDFGraph") []) (TCons ("Prelude","[]") [TCons ("RDF","RDFTriple") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RDF","RDFGraph") [2,3]) (Var 3)])),Func ("RDF","getRDFGraphPrefixByURI") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("RDF","RDFGraph") []) (TCons ("Prelude","Maybe") [TCons ("RDF","RDFPrefix") []]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("RDF","getRDFPrefixByURI") [Var 1],Comb (FuncPartCall 1) ("RDF","getRDFGraphPrefixes") []]))] []