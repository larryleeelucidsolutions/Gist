Prog "BinarySort" ["Prelude"] [] [Func ("BinarySort","pivot") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","div") [Comb FuncCall ("Prelude","-") [Comb FuncCall ("Prelude","length") [Var 1],Lit (Intc  1)],Lit (Intc  2)])),Func ("BinarySort","split") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 0],TVar 0,TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","splitAt") [Comb FuncCall ("BinarySort","pivot") [Var 1],Var 1]),(3,Comb FuncCall ("BinarySort","split._#selFP2#as") [Var 2]),(4,Comb FuncCall ("BinarySort","split._#selFP3#x") [Var 2]),(5,Comb FuncCall ("BinarySort","split._#selFP4#bs") [Var 2])] (Comb ConsCall ("Prelude","(,,)") [Var 3,Var 4,Var 5]))),Func ("BinarySort","split._#selFP2#as") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 13],TCons ("Prelude","[]") [TVar 13]]) (TCons ("Prelude","[]") [TVar 13])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 2)])])),Func ("BinarySort","split._#selFP3#x") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 13],TCons ("Prelude","[]") [TVar 13]]) (TVar 13)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 4)])])),Func ("BinarySort","split._#selFP4#bs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 13],TCons ("Prelude","[]") [TVar 13]]) (TCons ("Prelude","[]") [TVar 13])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 5)])])),Func ("BinarySort","split'") 3 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TVar 0]])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(4,Comb FuncCall ("BinarySort","split") [Var 3]),(5,Comb FuncCall ("BinarySort","split'._#selFP14#as") [Var 4]),(6,Comb FuncCall ("BinarySort","split'._#selFP15#x") [Var 4]),(7,Comb FuncCall ("BinarySort","split'._#selFP16#bs") [Var 4])] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,,)") [Var 5,Comb ConsCall ("Prelude","Just") [Var 6],Var 7]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Var 2,Var 6]) [Branch (Pattern ("Prelude","True") []) (Let [(8,Comb FuncCall ("BinarySort","split'") [Var 1,Var 2,Var 7]),(9,Comb FuncCall ("BinarySort","split'._#selFP7#as'") [Var 8]),(10,Comb FuncCall ("BinarySort","split'._#selFP8#x'") [Var 8]),(11,Comb FuncCall ("BinarySort","split'._#selFP9#bs'") [Var 8])] (Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("Prelude","++") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Var 9]],Var 10,Var 11])),Branch (Pattern ("Prelude","False") []) (Let [(12,Comb FuncCall ("BinarySort","split'") [Var 1,Var 2,Var 5]),(13,Comb FuncCall ("BinarySort","split'._#selFP11#as'") [Var 12]),(14,Comb FuncCall ("BinarySort","split'._#selFP12#x'") [Var 12]),(15,Comb FuncCall ("BinarySort","split'._#selFP13#bs'") [Var 12])] (Comb ConsCall ("Prelude","(,,)") [Var 13,Var 14,Comb FuncCall ("Prelude","++") [Var 15,Comb ConsCall ("Prelude",":") [Var 6,Var 7]]]))])])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("BinarySort","split'._#selFP14#as") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 19],TVar 19,TCons ("Prelude","[]") [TVar 19]]) (TCons ("Prelude","[]") [TVar 19])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("BinarySort","split'._#selFP15#x") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 19],TVar 19,TCons ("Prelude","[]") [TVar 19]]) (TVar 19)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("BinarySort","split'._#selFP16#bs") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 19],TVar 19,TCons ("Prelude","[]") [TVar 19]]) (TCons ("Prelude","[]") [TVar 19])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("BinarySort","split'._#selFP7#as'") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 19],TCons ("Prelude","Maybe") [TVar 19],TCons ("Prelude","[]") [TVar 19]]) (TCons ("Prelude","[]") [TVar 19])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("BinarySort","split'._#selFP8#x'") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 19],TCons ("Prelude","Maybe") [TVar 19],TCons ("Prelude","[]") [TVar 19]]) (TCons ("Prelude","Maybe") [TVar 19])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("BinarySort","split'._#selFP9#bs'") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 19],TCons ("Prelude","Maybe") [TVar 19],TCons ("Prelude","[]") [TVar 19]]) (TCons ("Prelude","[]") [TVar 19])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("BinarySort","split'._#selFP11#as'") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 19],TCons ("Prelude","Maybe") [TVar 19],TCons ("Prelude","[]") [TVar 19]]) (TCons ("Prelude","[]") [TVar 19])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("BinarySort","split'._#selFP12#x'") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 19],TCons ("Prelude","Maybe") [TVar 19],TCons ("Prelude","[]") [TVar 19]]) (TCons ("Prelude","Maybe") [TVar 19])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("BinarySort","split'._#selFP13#bs'") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 19],TCons ("Prelude","Maybe") [TVar 19],TCons ("Prelude","[]") [TVar 19]]) (TCons ("Prelude","[]") [TVar 19])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("BinarySort","merge") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(4,Comb FuncCall ("BinarySort","merge._#selFP21#x") [Var 2]),(5,Comb FuncCall ("BinarySort","merge._#selFP22#xs'") [Var 2]),(6,Comb FuncCall ("BinarySort","merge._#selFP19#y") [Var 3]),(7,Comb FuncCall ("BinarySort","merge._#selFP20#ys'") [Var 3])] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("BinarySort","merge") [Var 1,Var 5,Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 6,Comb FuncCall ("BinarySort","merge") [Var 1,Var 2,Var 7]])])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("BinarySort","merge._#selFP21#x") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 49]) (TVar 49)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 2)])),Func ("BinarySort","merge._#selFP22#xs'") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 49]) (TCons ("Prelude","[]") [TVar 49])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 3)])),Func ("BinarySort","merge._#selFP19#y") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 49]) (TVar 49)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 2)])),Func ("BinarySort","merge._#selFP20#ys'") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 49]) (TCons ("Prelude","[]") [TVar 49])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 3)]))] []