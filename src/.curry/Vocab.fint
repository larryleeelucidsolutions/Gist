Prog "Vocab" ["BinarySort","List","Maybe","Prelude","XML","XML2"] [TypeSyn ("Vocab","Vocab") Public [] (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]),Type ("Vocab","Pos") Public [] [Cons ("Vocab","Adjective") 0 Public [],Cons ("Vocab","Adverb") 0 Public [],Cons ("Vocab","Article") 0 Public [],Cons ("Vocab","Noun") 0 Public [],Cons ("Vocab","Preposition") 0 Public [],Cons ("Vocab","Pronoun") 0 Public [],Cons ("Vocab","Verb") 0 Public []],Type ("Vocab","Word") Public [] [Cons ("Vocab","Word") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Vocab","Pos") []]]]] [Func ("Vocab","posToString") 1 Public (FuncType (TCons ("Vocab","Pos") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Vocab","posFromString") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Vocab","Pos") [])) (Rule [] (Var 0)),Func ("Vocab","wordName") 1 Public (FuncType (TCons ("Vocab","Word") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Vocab","wordPos") 1 Public (FuncType (TCons ("Vocab","Word") []) (TCons ("Prelude","[]") [TCons ("Vocab","Pos") []])) (Rule [] (Var 0)),Func ("Vocab","isPos'") 1 Public (FuncType (TCons ("Vocab","Pos") []) (FuncType (TCons ("Vocab","Word") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Vocab","addWord") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Vocab","Word") []) (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]))) (Rule [] (Var 0)),Func ("Vocab","addWords") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]))) (Rule [] (Var 0)),Func ("Vocab","getWord") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Maybe") [TCons ("Vocab","Word") []]))) (Rule [] (Var 0)),Func ("Vocab","isPos") 3 Public (FuncType (TCons ("Vocab","Pos") []) (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Vocab","isAdjective") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Vocab","isAdverb") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Vocab","isArticle") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Vocab","isPreposition") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Vocab","isPronoun") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Vocab","removeSuffix") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Vocab","isNoun") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Vocab","isVerb") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Vocab","loadVocab") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Vocab","Word") []]])) (Rule [] (Var 0)),Func ("Vocab","vocabToXML") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (TCons ("XML","XmlExp") [])) (Rule [] (Var 0)),Func ("Vocab","writeVocab") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [] (Var 0))] []