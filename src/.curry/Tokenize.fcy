Prog "Tokenize" ["Parse","Prelude","Preprocess","Vocab"] [] [Func ("Tokenize","tokenizeWord") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))) (Rule [1,2,3] (Or (Or (Or (Or (Or (Or (Or (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Vocab","isAdjective") [],Var 1],Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Parse","Nonterminal") [Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'j'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Parse","Nonterminal") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Parse","Terminal") [Var 3,Var 2],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Vocab","isAdverb") [],Var 1],Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Parse","Nonterminal") [Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Parse","Nonterminal") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Parse","Terminal") [Var 3,Var 2],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Vocab","isArticle") [],Var 1],Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Parse","Nonterminal") [Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Parse","Nonterminal") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Parse","Terminal") [Var 3,Var 2],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])) (Case  Rigid (Comb FuncCall ("Vocab","isNoun") [Var 1,Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Parse","Nonterminal") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Parse","Nonterminal") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Parse","Terminal") [Var 3,Var 2],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Vocab","isPreposition") [],Var 1],Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Parse","Nonterminal") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Parse","Nonterminal") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Parse","Terminal") [Var 3,Var 2],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Vocab","isPronoun") [],Var 1],Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Parse","Nonterminal") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Parse","Nonterminal") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Parse","Terminal") [Var 3,Var 2],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])) (Case  Rigid (Comb FuncCall ("Vocab","isVerb") [Var 1,Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Parse","Nonterminal") [Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Parse","Nonterminal") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Parse","Terminal") [Var 3,Var 2],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Vocab","isAdjective") [],Var 1],Var 3]],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Vocab","isAdverb") [],Var 1],Var 3]],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Vocab","isArticle") [],Var 1],Var 3]],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Vocab","isPreposition") [],Var 1],Var 3]],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Vocab","isPronoun") [],Var 1],Var 3]],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Comb FuncCall ("Vocab","isNoun") [Var 1,Var 3]],Comb FuncCall ("Prelude","not") [Comb FuncCall ("Vocab","isVerb") [Var 1,Var 3]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Parse","Nonterminal") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Parse","Terminal") [Var 3,Var 2],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("Tokenize","tokenize") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Tokenize","tokenize.f.18") [Var 1,Lit (Intc  0)],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","words") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Preprocess","stripPunctuation") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Preprocess","sentences") [],Comb (FuncPartCall 1) ("Preprocess","decapitalize") []]]]])),Func ("Tokenize","tokenize.f.18") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Vocab","Word") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Tokenize","tokenize.f.18") [Var 1,Var 2,Var 5]]),Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Comb FuncCall ("Tokenize","tokenize.f.18") [Var 1,Comb FuncCall ("Prelude","+") [Var 2,Lit (Intc  1)],Comb ConsCall ("Prelude",":") [Var 7,Var 5]]),(9,Comb FuncCall ("Tokenize","tokenize.f.18._#selFP2#as") [Var 8]),(10,Comb FuncCall ("Tokenize","tokenize.f.18._#selFP3#bss") [Var 8])] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Tokenize","tokenizeWord") [Var 1,Var 2,Var 6],Var 9],Var 10]))])])),Func ("Tokenize","tokenize.f.18._#selFP2#as") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","[]") [TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 2)])),Func ("Tokenize","tokenize.f.18._#selFP3#bss") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 3)]))] []