Prog "Interpret" ["Parse","Prelude","RDF"] [Type ("Interpret","Predicate") Public [] [Cons ("Interpret","Predicate") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]] [Func ("Interpret","gistURI") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("Interpret","predicateName") 1 Public (FuncType (TCons ("Interpret","Predicate") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Interpret","Predicate") [2,3]) (Var 2)])),Func ("Interpret","predicateArgs") 1 Public (FuncType (TCons ("Interpret","Predicate") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Interpret","Predicate") [2,3]) (Var 3)])),Func ("Interpret","terminalRef") 1 Public (FuncType (TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Parse","terminalValue") [Var 1],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","show") [],Comb FuncCall ("Parse","terminalPos") [Var 1]]]])),Func ("Interpret","word") 1 Public (FuncType (TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Parse","Nonterminal") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 4) [Branch (LPattern (Charc  'w')) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 6) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 8) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 10) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 13) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Parse","terminalValue") [Var 14])])])])])])])])])])])])])])])),Func ("Interpret","wordRef") 1 Public (FuncType (TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Parse","Nonterminal") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 4) [Branch (LPattern (Charc  'w')) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 6) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 8) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 10) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 13) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Interpret","terminalRef") [Var 14])])])])])])])])])])])])])])])),Func ("Interpret","nounRef") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Parse","Nonterminal") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 16) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 14) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Interpret","wordRef") [Var 15]]])])])])])])])])])])])]),Branch (LPattern (Charc  'p')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case  Flex (Var 27) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 28) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [29,30]) (Case  Flex (Var 29) [Branch (Pattern ("Prelude",":") [31,32]) (Case  Flex (Var 32) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 30) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Interpret","wordRef") [Var 31]]])])])])])])])])])])])])])])])])])])])])])),Func ("Interpret","adjectiveRef") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Parse","Nonterminal") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'j')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  't')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 26) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 24) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'j'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Interpret","wordRef") [Var 25]]])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("Interpret","prepositionRef") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Parse","Nonterminal") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  's')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  't')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 26) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [27,28]) (Case  Flex (Var 27) [Branch (Pattern ("Prelude",":") [29,30]) (Case  Flex (Var 30) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 28) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Interpret","word") [Var 29]]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("Interpret","nounPhraseNounRef") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Parse","Nonterminal") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  ' ')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'h')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  's')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 26) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [27,28]) (Case  Flex (Var 27) [Branch (Pattern ("Prelude",":") [29,30]) (Case  Flex (Var 30) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 28) [Branch (Pattern ("Prelude",":") [31,32]) (Case  Flex (Var 32) [Branch (Pattern ("Prelude",":") [33,34]) (Case  Flex (Var 34) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Interpret","nounRef") [Var 1,Var 29])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("Interpret","adverbRef") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Parse","Nonterminal") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'b')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 20) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 18) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Interpret","word") [Var 19]]])])])])])])])])])])])])])])])])])])])),Func ("Interpret","verbRef") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Parse","Nonterminal") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'b')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 16) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 14) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Interpret","wordRef") [Var 15]]])])])])])])])])])])])])])])])),Func ("Interpret","verbPhraseVerbRef") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Parse","Nonterminal") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'b')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  ' ')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'h')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  's')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 26) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [27,28]) (Case  Flex (Var 27) [Branch (Pattern ("Prelude",":") [29,30]) (Case  Flex (Var 30) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 28) [Branch (Pattern ("Prelude",":") [31,32]) (Case  Flex (Var 32) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Interpret","verbRef") [Var 1,Var 29])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("Interpret","interpretNounPhrase") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Interpret","Predicate") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Parse","Nonterminal") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  ' ')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'h')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  's')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 26) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [27,28]) (Case  Flex (Var 27) [Branch (Pattern ("Prelude",":") [29,30]) (Case  Flex (Var 30) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 28) [Branch (Pattern ("Prelude",":") [31,32]) (Case  Flex (Var 32) [Branch (Pattern ("Prelude",":") [33,34]) (Case  Flex (Var 34) [Branch (Pattern ("Prelude","[]") []) (Let [(35,Comb FuncCall ("Interpret","nounRef") [Var 1,Var 29])] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Interpret","interpretNounPhrase._#lambda1") [Var 35,Var 1],Var 31],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("Interpret","interpretNounPhrase._#lambda2") [Var 35,Var 1]],Var 33]]))])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("Interpret","interpretNounPhrase._#lambda1") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Interpret","Predicate") [])))) (Rule [1,2,3] (Comb ConsCall ("Interpret","Predicate") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("Interpret","gistURI") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'j'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Interpret","adjectiveRef") [Var 2,Var 3],Comb ConsCall ("Prelude","[]") []]]])),Func ("Interpret","interpretNounPhrase._#lambda2") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Interpret","Predicate") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Parse","Nonterminal") [4,5]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 6) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 8) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 10) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 12) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 14) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 16) [Branch (LPattern (Charc  's')) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 18) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 20) [Branch (LPattern (Charc  't')) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 22) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case  Flex (Var 24) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case  Flex (Var 26) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case  Flex (Var 28) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 29) [Branch (Pattern ("Prelude",":") [30,31]) (Case  Flex (Var 30) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 31) [Branch (Pattern ("Prelude",":") [32,33]) (Case  Flex (Var 32) [Branch (LPattern (Charc  ' ')) (Case  Flex (Var 33) [Branch (Pattern ("Prelude",":") [34,35]) (Case  Flex (Var 34) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 35) [Branch (Pattern ("Prelude",":") [36,37]) (Case  Flex (Var 36) [Branch (LPattern (Charc  'h')) (Case  Flex (Var 37) [Branch (Pattern ("Prelude",":") [38,39]) (Case  Flex (Var 38) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 39) [Branch (Pattern ("Prelude",":") [40,41]) (Case  Flex (Var 40) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 41) [Branch (Pattern ("Prelude",":") [42,43]) (Case  Flex (Var 42) [Branch (LPattern (Charc  's')) (Case  Flex (Var 43) [Branch (Pattern ("Prelude",":") [44,45]) (Case  Flex (Var 44) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 45) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [46,47]) (Case  Flex (Var 46) [Branch (Pattern ("Prelude",":") [48,49]) (Case  Flex (Var 49) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 47) [Branch (Pattern ("Prelude",":") [50,51]) (Case  Flex (Var 50) [Branch (Pattern ("Prelude",":") [52,53]) (Case  Flex (Var 53) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 51) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Interpret","Predicate") [Comb FuncCall ("Interpret","prepositionRef") [Var 2,Var 48],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Interpret","nounPhraseNounRef") [Var 2,Var 52],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Interpret","interpretNounPhrase") [Var 2,Var 52]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("Interpret","interpretVerbPhrase") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Interpret","Predicate") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Parse","Nonterminal") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'b')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  ' ')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'h')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  's')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 26) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [27,28]) (Case  Flex (Var 27) [Branch (Pattern ("Prelude",":") [29,30]) (Case  Flex (Var 30) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 28) [Branch (Pattern ("Prelude",":") [31,32]) (Case  Flex (Var 32) [Branch (Pattern ("Prelude","[]") []) (Let [(33,Comb FuncCall ("Interpret","verbRef") [Var 1,Var 29])] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Interpret","interpretVerbPhrase._#lambda3") [Var 1,Var 33],Var 31]))])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("Interpret","interpretVerbPhrase._#lambda3") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Interpret","Predicate") [])))) (Rule [1,2,3] (Comb ConsCall ("Interpret","Predicate") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("Interpret","gistURI") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Interpret","adverbRef") [Var 1,Var 3],Comb ConsCall ("Prelude","[]") []]]])),Func ("Interpret","interpretClause") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Parse","Token") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Interpret","Predicate") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Parse","Nonterminal") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  's')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 20) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 24) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 22) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 26) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("Interpret","interpretNounPhrase") [Var 1]],Comb ConsCall ("Prelude",":") [Var 19,Var 25]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Interpret","interpretVerbPhrase") [Var 1,Var 23],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Interpret","Predicate") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("Interpret","gistURI") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Interpret","verbPhraseVerbRef") [Var 1,Var 23],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Interpret","nounPhraseNounRef") [Var 1,Var 19],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []],Case  Rigid (Comb FuncCall ("Prelude","null") [Var 25]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Interpret","Predicate") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("Interpret","gistURI") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'j'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Interpret","verbPhraseVerbRef") [Var 1,Var 23],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Interpret","nounPhraseNounRef") [Var 1,Comb FuncCall ("Prelude","head") [Var 25]],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []])]]]])])])])])])])])])])])])])])])])])])])])])])])),Func ("Interpret","predicateToRDFTriple") 1 Public (FuncType (TCons ("Interpret","Predicate") []) (TCons ("RDF","RDFTriple") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Interpret","Predicate") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("RDF","RDFTriple") [Comb ConsCall ("RDF","RDFNode") [Var 4],Comb ConsCall ("RDF","RDFPredicate") [Var 2,Comb ConsCall ("Prelude","Nothing") []],Comb ConsCall ("RDF","RDFNode") [Var 6]])])])])])),Func ("Interpret","interpretationToRDFGraph") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Interpret","Predicate") []]) (TCons ("RDF","RDFGraph") [])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("RDF","RDFGraph") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("RDF","rdfPrefix") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("RDF","RDFPrefix") [Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Interpret","gistURI") []],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Interpret","predicateToRDFTriple") [],Var 1]]))] []