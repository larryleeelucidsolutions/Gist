Prog "Rewrite" ["Maybe","Prelude","Parser"] [TypeSyn ("Rewrite","Binding") Public [0] (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Rewrite","Token") [TVar 0]]]),TypeSyn ("Rewrite","Pattern") Public [] (TCons ("Prelude","[]") [TCons ("Rewrite","PatternToken") []]),TypeSyn ("Rewrite","Template") Public [] (TCons ("Prelude","[]") [TCons ("Rewrite","TemplateToken") []]),Type ("Rewrite","Token") Public [0] [Cons ("Rewrite","Terminal") 2 Public [TVar 0,TCons ("Prelude","Int") []],Cons ("Rewrite","Nonterminal") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Rewrite","Token") [TVar 0]]]]],Type ("Rewrite","PatternToken") Public [] [Cons ("Rewrite","PatternToken") 3 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]],Type ("Rewrite","TemplateToken") Public [] [Cons ("Rewrite","RefTemplateToken") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Rewrite","TemplateToken") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]],Type ("Rewrite","Rule") Public [] [Cons ("Rewrite","Rule") 2 Public [TCons ("Prelude","[]") [TCons ("Rewrite","PatternToken") []],TCons ("Prelude","[]") [TCons ("Rewrite","TemplateToken") []]]]] [Func ("Rewrite","terminalValue") 1 Public (FuncType (TCons ("Rewrite","Token") [TVar 0]) (TVar 0)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Rewrite","Terminal") [2,3]) (Var 2)])),Func ("Rewrite","terminalPos") 1 Public (FuncType (TCons ("Rewrite","Token") [TVar 0]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Rewrite","Terminal") [2,3]) (Var 3)])),Func ("Rewrite","bindPatternToken") 3 Public (FuncType (TCons ("Rewrite","PatternToken") []) (FuncType (TCons ("Rewrite","Token") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Rewrite","Token") [TVar 0]]]]) (TCons ("Prelude","Success") [])))) (Rule [1,2,3] (Case  Flex (Var 1) [Branch (Pattern ("Rewrite","PatternToken") [4,5,6]) (Case  Flex (Var 2) [Branch (Pattern ("Rewrite","Nonterminal") [7,8]) (Comb FuncCall ("Prelude","&") [Comb FuncCall ("Prelude","=:=") [Var 4,Var 7],Comb FuncCall ("Prelude","=:=") [Var 3,Comb FuncCall ("Rewrite","bindPatternToken.f.8") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 5,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","zip") [Var 6,Var 8]]]]])])])),Func ("Rewrite","bindPatternToken.f.8") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TVar 1]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("Rewrite","bindPatternToken.f.8") [Var 3]),Branch (Pattern ("Prelude","Just") [6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 6,Var 5],Comb FuncCall ("Rewrite","bindPatternToken.f.8") [Var 3]])])])])),Func ("Rewrite","bindPattern") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Rewrite","PatternToken") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Rewrite","Token") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Rewrite","Token") [TVar 0]]]]) (TCons ("Prelude","Success") [])))) (Rule [1,2,3] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","success") [])]),Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [6,7]) (Free [8,9] (Comb FuncCall ("Prelude","&") [Comb FuncCall ("Rewrite","bindPatternToken") [Var 4,Var 6,Var 8],Comb FuncCall ("Prelude","&") [Comb FuncCall ("Rewrite","bindPattern") [Var 5,Var 7,Var 9],Comb FuncCall ("Prelude","=:=") [Var 3,Comb FuncCall ("Prelude","++") [Var 8,Var 9]]]]))])])),Func ("Rewrite","instantiateTemplateToken") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Rewrite","Token") [TVar 0]]]]) (FuncType (TCons ("Rewrite","TemplateToken") []) (TCons ("Rewrite","Token") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Rewrite","RefTemplateToken") [3]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","head") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Maybe","fromJust") [],Comb FuncCall ("Prelude","lookup") [Var 3,Var 1]]]),Branch (Pattern ("Rewrite","TemplateToken") [4,5]) (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("Rewrite","Nonterminal") [Var 4],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","concat") [],Comb FuncCall ("Maybe","mapMaybe") [Comb (FuncPartCall 1) ("Rewrite","instantiateTemplateToken._#lambda1") [Var 1]]],Var 5]])])),Func ("Rewrite","instantiateTemplateToken._#lambda1") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Rewrite","Token") [TVar 74]]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Rewrite","Token") [TVar 74]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","lookup") [Var 2,Var 1])),Func ("Rewrite","instantiateTemplate") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Rewrite","Token") [TVar 0]]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Rewrite","TemplateToken") []]) (TCons ("Prelude","[]") [TCons ("Rewrite","Token") [TVar 0]]))) (Rule [1,2] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Rewrite","instantiateTemplateToken") [Var 1],Var 2])),Func ("Rewrite","reduceHeadUsingRule") 2 Public (FuncType (TCons ("Rewrite","Rule") []) (FuncType (TCons ("Prelude","[]") [TCons ("Rewrite","Token") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Rewrite","Token") [TVar 0]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Rewrite","Rule") [3,4]) (Free [5] (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Rewrite","bindPattern") [Var 3,Var 2,Var 5],Comb FuncCall ("Rewrite","instantiateTemplate") [Var 5,Var 4]]))])),Func ("Rewrite","reduceHead") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Rewrite","Rule") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Rewrite","Token") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Rewrite","Token") [TVar 0]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","?") [Comb FuncCall ("Rewrite","reduceHeadUsingRule") [Var 3,Var 2],Comb FuncCall ("Rewrite","reduceHead") [Var 4,Var 2]])])),Func ("Rewrite","reduce") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Rewrite","Rule") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Rewrite","Token") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Rewrite","Token") [TVar 0]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","?") [Comb FuncCall ("Rewrite","reduceHead") [Var 1,Var 2],Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("Prelude","$##") [Comb (FuncPartCall 1) ("Rewrite","reduce") [Var 1],Var 4]]])])),Func ("Rewrite","reduce'") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Rewrite","Rule") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Rewrite","Token") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Rewrite","Token") [TVar 0]]))) (Rule [1,2] (Or (Var 2) (Comb FuncCall ("Prelude","$##") [Comb (FuncPartCall 1) ("Rewrite","reduce'") [Var 1],Comb FuncCall ("Rewrite","reduce") [Var 1,Var 2]])))] []